service: serverless-shortlinker
frameworkVersion: '3'

useDotenv: true
custom:
  esbuild:
    exclude: [ ]
  userTableName: 'userTable-${sls:stage}'
  tokenTableName: 'tokenTable-${sls:stage}'
  linkTableName: 'linksTable-${sls:stage}'
  mailQueueName: 'mailQueue-${sls:stage}'
provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  environment:
    STAGE: ${sls:stage}
    DYNAMODB_USER_TABLE: ${self:custom.userTableName}
    DYNAMODB_TOKEN_TABLE: ${self:custom.tokenTableName}
    DYNAMODB_LINK_TABLE: ${self:custom.linkTableName}
    MAIL_QUEUE: ${self:custom.mailQueueName}
    MAIL_QUEUE_URL: { Ref: MailQueue}
    JWT_REFRESH_SECRET: ${env:JWT_REFRESH_SECRET}
    JWT_ACCESS_SECRET: ${env:JWT_ACCESS_SECRET}
    SOURCE_EMAIL: ${env:SOURCE_EMAIL}
  iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.userTableName}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.userTableName}/index/*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tokenTableName}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tokenTableName}/index/*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.linkTableName}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.linkTableName}/index/*"
        - Effect: Allow
          Action:
            - "sqs:SendMessage"
            - "sqs:GetQueueUrl"
          Resource: "arn:aws:sqs:${aws:region}:${aws:accountId}:${self:custom.mailQueueName}"
        - Effect: Allow
          Action:
            - "ses:*"
          Resource: "*"

functions:
  auth:
    handler: auth/handler.handler
  function1:
    handler: api/src/app.handler
    events:
      - http: ANY /
      - http:
          path: '/user/me'
          method: get
          authorizer: auth
      - http:
          path: '/links'
          method: ANY
          authorizer: auth
      - http:
          path: '/links/{path}'
          method: DELETE
          authorizer: auth
      - http: ANY {proxy+}
  scheduler:
    handler: scheduler/handler.handler
    events:
      - eventBridge:
          schedule: rate(1 hour)
  receiver:
    handler: queue/handler.handler
    events:
      - sqs:
          arn:
            "arn:aws:sqs:${aws:region}:${aws:accountId}:${self:custom.mailQueueName}"

resources:
  Resources:
    LinkTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: shortLink
            AttributeType: S
          - AttributeName: isActive
            AttributeType: N
          - AttributeName: expiresIn
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: IsActiveIndex
            KeySchema:
              - AttributeName: isActive
                KeyType: HASH
              - AttributeName: expiresIn
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
          - IndexName: ShorLinkIndex
            KeySchema:
              - AttributeName: shortLink
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        Replicas:
          - Region: "eu-central-1"
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.linkTableName}
    TokenTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        Replicas:
          - Region: 'eu-central-1'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tokenTableName}
    UserTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        Replicas:
          - Region: "eu-central-1"
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.userTableName}
    MailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.mailQueueName}
plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin

